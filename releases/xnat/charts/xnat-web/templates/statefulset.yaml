apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "xnat-web.fullname" . }}
  labels:
    {{- include "xnat-web.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "xnat-web.statefulsetLabels" . | nindent 6 }}
  serviceName: {{ include "xnat-web.fullname" . }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        {{- include "xnat-web.statefulsetLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "xnat-web.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- $request := trimSuffix "Mi" .Values.resources.requests.memory }}
          env:
          {{- if .Values.nonheapmem }}
          {{- $nonheap := trimSuffix "Mi" .Values.nonheapmem }}
            - name: CATALINA_OPTS
              value: -Xms{{ sub $request $nonheap }}m -Xmx{{ sub $request $nonheap }}m -Dxnat.home=/data/xnat/home
          {{- end }}
            - name: TZ
              value: {{ .Values.timezone }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.probes.liveness | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.probes.readiness | nindent 12 }}
          startupProbe:
            {{- toYaml .Values.probes.startup | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /etc/passwd
              name: passwd
              readOnly: true
              subPath: passwd
            - mountPath: /usr/local/tomcat
              name: tomcat
            - mountPath: /usr/local/tomcat/conf/Catalina
              name: conf-catalina
            - mountPath: /data/xnat/home
              name: xnat-home
            - mountPath: /data/xnat/home/config
              name: xnat-home-config
              readOnly: true
            - mountPath: /data/xnat/home/plugins
              name: xnat-home-plugins
            {{- range $name, $c := .Values.persistence }}
            {{- if $c.size }}
            - mountPath: {{ $c.mountPath | quote }}
              name: {{ $name | quote }}
            {{- end }}
            {{- end }}
            {{- range $name, $c := .Values.volumes }}
            {{- if $c.size }}
            - mountPath: {{ $c.mountPath | quote }}
              name: {{ $name | quote }}
              {{- if $c.mountPropagation }}
              mountPropagation: {{$c.mountPropagation|default "None"|quote}}
              {{- end }}
            {{- end }}
            {{- end }}
        - name: plugin-logs
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: debian:bullseye-slim
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [bash, -c]
          args:
            - |
              until [ -f /data/xnat/home/logs/*.log ]; do sleep 5; done
              exec tail -F /data/xnat/home/logs/*.log
          volumeMounts:
            - name: xnat-home
              mountPath: /data/xnat/home
      initContainers:
        - name: config
          image: ghcr.io/sydneyresearchtech/debian
          command: [bash, -c]
          args:
            - |
              set -x
              PGJDBCURI="jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}"
              export PGJDBCURI
              # Popluate and merge Secrets for config
              for f in /k8s_config/*; do
                file="$(basename ${f})"
                envsubst < "${f}" > "/data/xnat/home/config/${file}"
              done
              # Popluate and merge Secrets for plugins and auth plugins
              mkdir -p /data/xnat/home/config/auth
              for f in /k8s_plugins/*; do
                file="$(basename ${f})"
                DEST="/data/xnat/home/plugins"
                grep -q '^auth.method=' "${f}" && \
                  DEST="/data/xnat/home/config/auth"
                envsubst < "${f}" > "${DEST}/${file}"
              done
              # Wait for the postgresql database to be ready
              which pg_isready &>/dev/null && \
                until pg_isready --quiet; do sleep 5; done
          env:
            - name: PGDATABASE
              {{- (include "xnat-web.postgresql.database" .) | nindent 14 }}
            - name: PGHOST
              {{- (include "xnat-web.postgresql.host" .) | nindent 14 }}
            - name: PGPASSWORD
              {{- (include "xnat-web.postgresql.password" .) | nindent 14 }}
            - name: PGPORT
              {{- (include "xnat-web.postgresql.port" .) | nindent 14 }}
            - name: PGUSER
              {{- (include "xnat-web.postgresql.user" .) | nindent 14 }}
            - name: XNAT_ADMIN_CREDS
              valueFrom:
                secretKeyRef:
                  name: {{ include "xnat-web.fullname" . }}-admin
                  key: password
            {{- range .Values.pluginSecrets }}
            {{- $name := .existingSecret -}}
            {{- range .secretKeys }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ $name }}
                  key: {{ .key }}
            {{- end }}
            {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
            - mountPath: /data/xnat/home/config
              name: xnat-home-config
            - mountPath: /data/xnat/home/plugins
              name: xnat-home-plugins
            - mountPath: /k8s_config
              name: conf-xnat
              readOnly: true
            - mountPath: /k8s_plugins
              name: conf-plugins
              readOnly: true
        - name: home
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [bash, -c]
          args:
            - |
              set -x
              shopt -s extglob
              plugins=( {{ join " " (keys .Values.plugins) }} )
              # Copy Tomcat folder
              cp -r --preserve=mode,timestamps --update=none /usr/local/tomcat/* /TOMCAT
              # Copy XNAT_HOME directory excluding the plugins folder
              cp -r --preserve=mode,timestamps --update=none ${XNAT_HOME}/!(plugins) /XNAT_HOME
              # Copy plugins that are configured in values.yml
              for plugin in ${plugins[@]}; do
                cp -r --preserve=mode,timestamps --update=none ${XNAT_HOME}/plugins/${plugin}-* /XNAT_HOME_PLUGINS || true
              done
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
            - mountPath: /TOMCAT
              name: tomcat
            - mountPath: /XNAT_HOME
              name: xnat-home
            - mountPath: /XNAT_HOME_PLUGINS
              name: xnat-home-plugins
      volumes:
        - name: passwd
          configMap:
            name: {{ include "xnat-web.fullname" . }}
            items:
              - key: passwd
                path: passwd
        - name: tomcat
          emptyDir: {}
        # SEVERE: Unable to create directory for deployment: [/usr/local/tomcat/conf/Catalina/localhost]
        - name: conf-catalina
          emptyDir: {}
        - name: xnat-home
          emptyDir: {}
        - name: xnat-home-config
          emptyDir: {}
        - name: xnat-home-plugins
          emptyDir: {}
        - name: conf-plugins
          configMap:
            name: {{ include "xnat-web.fullname" . }}-plugins
        - name: conf-xnat
          configMap:
            name: {{ include "xnat-web.fullname" . }}-config
        {{- $context := . -}}
        {{- range $name, $c := .Values.volumes }}
        {{- if $c.size }}
        - name: {{ $name }}
          persistentVolumeClaim:
            claimName: {{ $c.existingClaim | default (printf "%s-%s" (include "xnat-web.fullname" $context) $name) }}
        {{- end }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    {{- range $name, $c := .Values.persistence }}
    {{- if not $c.existingClaim }}
    {{- if $c.size }}
    - metadata:
        name: {{ $name | quote }}
      spec:
        accessModes: [ {{ $c.accessMode | quote }} ]
        {{- if (or $c.storageClass $.Values.global.storageClass) }}
        storageClassName: {{ $c.storageClass | default $.Values.global.storageClass | quote }}
        {{- end }}
        volumeMode: Filesystem
        resources:
          requests:
            storage: {{ $c.size }}
    {{- end }}
    {{- end }}
    {{- end }}
